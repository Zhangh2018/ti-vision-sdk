/*******************************************************************************
 *                                                                             *
 * Copyright (c) 2013 Texas Instruments Incorporated - http://www.ti.com/      *
 *                        ALL RIGHTS RESERVED                                  *
 *                                                                             *
 ******************************************************************************/

/*******************************************************************************
*  file name: a15_0.cfg
*  Set A15 core 0 specific configuration
*
*******************************************************************************/

var CurrentPlatform = java.lang.System.getenv("PLATFORM");

xdc.print("# !!! Current build platform is [" + CurrentPlatform + "] !!!" );

xdc.loadPackage('ti.sysbios').profile = "release";
xdc.loadCapsule("utility/BIOS_common.cfg");

/* root of the configuration object model */
var Program = xdc.useModule('xdc.cfg.Program');

xdc.useModule('ti.sysbios.gates.GateHwi');
var BIOS = xdc.useModule('ti.sysbios.BIOS');
BIOS.cpuFreq.hi = 0;
BIOS.cpuFreq.lo = 588000000; /* 588 MHz */

/*
 *  ======== Operating System Configuration ========
 */

/* no rts heap */
Program.heap = 0;
Program.argSize = 100;  /* minimum size */
Program.stack = 0x4000;

/* create a default heap */
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
var heapMemParams = new HeapMem.Params();
heapMemParams.size = 0x40000;

var Memory = xdc.useModule('xdc.runtime.Memory');
Memory.defaultHeapInstance = HeapMem.create(heapMemParams);

/* Enable Cache */
var Cache = xdc.useModule('ti.sysbios.family.arm.a15.Cache');
Cache.enableCache = true;

/***********************************************
 *              MMU Configuration              *
 ***********************************************/
var Mmu = xdc.useModule('ti.sysbios.family.arm.a15.Mmu');
Mmu.enableMMU = true;

/******************************************************************************
 *
 * SYS/BIOS assigns the following defaults to MAIR0 ATTR0, ATTR1 and ATTR2:
 *
 * ATTR0 -> 0x44 (mark memory region as non-cacheable normal memory)
 * ATTR1 -> 0x04 (mark memory region as device memory, i.e. strongly
 * ordered and non-cacheable)
 * ATTR2 -> 0xFF (mark memory region as normal memory, RW cacheable and
 * RW allocate)
 ******************************************************************************
 */


// descriptor attribute structure
var attrs0 = new Mmu.DescriptorAttrs();

Mmu.initDescAttrsMeta(attrs0);
attrs0.type = Mmu.DescriptorType_BLOCK;    // BLOCK descriptor
attrs0.shareable = 2;                      // sharerable
attrs0.attrIndx = 1;                       // Non-cache, device memory

// Set the descriptor for each entry in the address range
for (var i=0x40000000; i < 0x60000000; i = i + 0x00200000) {
    // Each 'BLOCK' descriptor entry spans a 2MB address range
    Mmu.setSecondLevelDescMeta(i, i, attrs0);
}

// descriptor attribute structure
var attrs1 = new Mmu.DescriptorAttrs();

Mmu.initDescAttrsMeta(attrs1);
attrs1.type = Mmu.DescriptorType_BLOCK;    // BLOCK descriptor
attrs1.shareable = 2;                      // sharerable
attrs1.attrIndx = 2;                       // Cached, normal memory

// Set the descriptor for each entry in the address range
for (var i=0x80000000; i < 0xA0000000; i = i + 0x00200000) {
    // Each 'BLOCK' descriptor entry spans a 2MB address range
    Mmu.setSecondLevelDescMeta(i, i, attrs1);
}

// descriptor attribute structure
var attrs2 = new Mmu.DescriptorAttrs();

Mmu.initDescAttrsMeta(attrs2);
attrs2.type = Mmu.DescriptorType_BLOCK;    // BLOCK descriptor
attrs2.shareable = 2;                      // sharerable
attrs2.attrIndx = 0;                       // Non-cache, normal memory

// Set the descriptor for each entry in the address range
for (var i=0xA0000000; i < 0xB0000000; i = i + 0x00200000) {
    // Each 'BLOCK' descriptor entry spans a 2MB address range
    Mmu.setSecondLevelDescMeta(i, i, attrs2);
}


Program.sectMap[".bss:extMemNonCache:remoteLogCoreShm"] = "REMOTE_LOG_MEM";


Program.sectMap[".text"]              = "A15_0_CODE_MEM";
Program.sectMap[".stack"]             = "A15_0_DATA_MEM";
Program.sectMap[".bss"]               = "A15_0_DATA_MEM";
Program.sectMap[".cinit"]             = "A15_0_DATA_MEM";
Program.sectMap[".const"]             = "A15_0_DATA_MEM";
Program.sectMap[".data"]              = "A15_0_DATA_MEM";
Program.sectMap[".sysmem"]            = "A15_0_DATA_MEM";
Program.sectMap[".bss:taskStackSection"]  = "A15_0_DATA_MEM";
Program.sectMap[".bss:NDK_PACKETMEM"]     = "A15_0_DATA_MEM";
Program.sectMap[".bss:NDK_MMBUFFER"]      = "A15_0_DATA_MEM";

var InitXbar    = xdc.useModule("ti.sysbios.family.shared.vayu.IntXbar");
