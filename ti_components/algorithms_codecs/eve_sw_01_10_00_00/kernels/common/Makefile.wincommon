#/*==========================================================================*/
#/*      Copyright (C) 2009-2013 Texas Instruments Incorporated.             */
#/*                      All Rights Reserved                                 */
#/*==========================================================================*/
ifeq (0,1)
mkfile_path := $(abspath $(lastword $(MAKEFILE_LIST)))
makefile_dir := $(dir $(mkfile_path))
include $(makefile_dir)/Makefile.linux
else

# Common makefile for VCOP-C kernels and drivers

# The Makefile expects users to set the variable FILE.
# If the TEST_BENCH is not $(FILE), users need to set the variable TEST_BENCH.
# All the *.c files to be built can be included in the variable CFILES.
# The Makefile enforses the presence of the file ..\src_kernelC\$(FILE)_kernel.k.
# The extra *.k files can be included in the variable KERNELFILES.

ARP32_TOOLS ?= "C:\Program Files\Texas Instruments\ARP32_tools"
OBJ_DIR = ".\elf_out"

# kernel code (VCOP-C)
KERNEL = ..\src_kernelC\$(FILE)_kernel

# Kernel library to be linked in case of Object-only build.
KERNELLIB = ..\..\..\lib\release\libevekernels.eve.lib

# It is necessary to separate out the Natural C files and the Kernel files
# which get compiled and linked into the libevekernels.lib and libevenatckernels.lib
# If these files don't exist (as possible for Object release mode), it is necessary
# to avoid compiling these files to prevent make error. Only the libraries need to
# be linked.
# NATURALC will have the files to be compiled in src_C folder.
# KERNELCFILES will have the files to be compiled in src_kernelC folder.
# ALLCFILES will have all the remaining files to be compiled + Test Bench.
NATURALC ?= $(foreach f,$(CFILES),$(if $(filter src_C,$(subst \, ,$f)),$f))
NATURALCFINAL = $(patsubst %.c,%,$(NATURALC))
KERNELCFILES = $(foreach f,$(CFILES),$(if $(filter src_kernelC,$(subst \, ,$f)),$f))
ALLCFILES = $(filter-out $(NATURALC) $(KERNELCFILES),$(CFILES))

# test bench code
TEST_BENCH ?= $(FILE)

HOST_EXE_FILE_NAME ?= a.exe

HOSTCC = "g++"
HOSTCC_FLAGS += -g -fpermissive -I$(TARGETINC_VCOP) -I$(EVE_PROFILE_INC) -I$(EVE_TEST_INC) -DVCOP_HOST_EMULATION -o $(OBJ_DIR)\$(HOST_EXE_FILE_NAME)

MSVC_CC = cl
MSVC_CC_FLAGS += /EHsc /TP /W0 /DVCOP_HOST_EMULATION /Fo$(OBJ_DIR)\ /Fe$(OBJ_DIR)\$(HOST_EXE_FILE_NAME) /Od /MDd /Gm /Zi /RTC1 -I$(TARGETINC_VCOP) -I$(EVE_PROFILE_INC) -I$(EVE_TEST_INC)


# VCOP-C compiler (aka symbolic assembler)
# KERNELCC = $(ARP32_TOOLS)\bin\vcc-arp32.exe

# EVE C compiler
TARGETCC = $(ARP32_TOOLS)\bin\cl-arp32.exe
TARGETOFD = $(ARP32_TOOLS)\bin\ofd-arp32.exe
TARGETINC = $(ARP32_TOOLS)\include
TEMPINC1 ="..\..\..\..\starterware\inc"
TEMPINC2 ="..\..\..\..\starterware\inc\baseaddress\vayu\eve"
KERNEL_INC ="..\..\..\inc"
TARGET_INC_K ="..\inc"
TARGET_SRC_K ="..\src_kernelC"
TARGET_SRC_C ="..\src_C"
TARGETCC_FLAGS = --opt_for_speed=5 -kh --silicon_version=v210 -lu  --display_error_number --diag_suppress=26066 --diag_suppress=10063
TARGETLD = $(ARP32_TOOLS)\bin\lnk-arp32.exe -cr
EVE_LIB = $(ARP32_TOOLS)\lib\rtsarp32_v200.lib
EVE_LCF ?="..\..\..\common\linker_boot_cama.cmd"
EVE_START_LIB = "..\..\..\..\starterware\libs\vayu\eve\release\libevestarterware_eve.lib"


EVE_TEST_INC="..\..\..\common"
EVE_PROFILE_INC="..\..\..\..\common"
EVE_PROFILE = "..\..\..\..\common\eve_profile.c"

EVE_PROFILEOBJ = "eve_profile.obj"
CONFIG_PARSER = "..\..\..\..\common\configparser.c"
CONFIG_PARSEROBJ = "configparser.obj"

ALLCFILES += $(TEST_BENCH).c
ALLCFILESOBJ = $(patsubst %.c,%.obj,$(ALLCFILES))
CURVE_FITTING = "..\..\..\..\common\curve_fitting.c"
EVE_STATS_COLLLECTOR = "..\..\..\..\common\ti_stats_collector.c"


# set KFILES and KERNELLIB only if KERNEL.k source file exists.
# This way we can avoid compiling them if they don't exist.
ifneq (,$(wildcard $(KERNEL).k))
KERNELLIB := $(patsubst %.c,%.obj,$(KERNELCFILES))
KFILES = $(KERNELCFILES)
KFILES += $(KERNEL).k
KERNELLIB += $(KERNEL).obj
ifneq (,$(wildcard $(KERNELFILES)))
KFILES += $(KERNELFILES)
KERNELLIB += $(patsubst %.k,%.obj,$(KERNELFILES))
endif
endif

# Linking the libevenatckernels.eve.lib library only 
# if it is required by test bench.
ifneq "$(NATURALC)" ""
NATCLIB = ..\..\..\lib\release\libevenatckernels.eve.lib
NATCOBJ = $(patsubst %.c,%.obj,$(NATURALC))
# As for KernelC, set NATCFILES NATCLIB and only if NATURALC source exists.
# This way we can avoid compiling them if they don't exist.
ifneq (,$(wildcard $(NATURALC)))
NATCFILES = $(NATURALC)
NATCLIB = $(NATCOBJ)
endif
endif

# location of vcop.h
TARGETINC_VCOP = $(ARP32_TOOLS)\include\vcop
VCOP_H       = vcop.h

BOOT = ..\..\..\common\boot_arp32.obj

# 'host' rules
host: a.out

a.out: $(OBJ_DIR) $(ALLCFILES) $(KFILES)
	$(HOSTCC) $(HOSTCC_FLAGS) -I$(TARGET_INC_K) $(ALLCFILES) $(EVE_PROFILE) $(CURVE_FITTING) $(CONFIG_PARSER) $(NATCFILES)


# 'hostrun' rules
hostrun: host
	$(HOST_EXE_FILE_NAME)

msvc: $(OBJ_DIR)
	$(MSVC_CC) $(MSVC_CC_FLAGS) -I$(TARGET_INC_K) -I$(KERNEL_INC) $(ALLCFILES) $(EVE_PROFILE) $(CURVE_FITTING) $(CONFIG_PARSER) $(NATCFILES) $(KERNELCFILES) $(HOSTFILES)

# 'msvcrun' rules
msvcrun: msvc
	cd $(OBJ_DIR) && $(HOST_EXE_FILE_NAME) > translate.data && move ./translate.data ../translate.data

# 'target' rules - Default rule to build release binary for target platform
target: DEBUG_FLAG = -O3
target: target_build

# 'profile' rules - To build debug binary on target platform
profile: DEBUG_FLAG = -DREPORT -DSCTM -O3 -kv
profile: target_build mem_info

mem_info:
	$(TARGETOFD) --func_info $(KERNEL).obj

# 'debug' rules - To build debug binary on target platform
debug: DEBUG_FLAG = -g
debug: target_build

# 'target_build' rules
target_build: $(OBJ_DIR) $(OBJ_DIR)\$(FILE)_kernelC.out

target_run: target_build
	C:\ti\ccsv5\ccs_base\scripting\examples\loadti\loadti.bat -c C:\Users\a0393754\ti\CCSTargetConfigurations\vayu_sim.ccxml --stdout-file=translate.data --fileio=$(OBJ_DIR) $(OBJ_DIR)\$(FILE)_kernelC.out 

$(OBJ_DIR)\$(FILE)_kernelC.out: $(KERNELLIB) $(BOOT) $(NATCLIB) $(ALLCFILES)
	$(TARGETCC) $(DEBUG_FLAG) $(TARGETCC_FLAGS) -I$(TARGETINC) -I$(TARGETINC_VCOP) -I . -I$(EVE_PROFILE_INC) -I$(EVE_TEST_INC) -I$(TEMPINC1) -I$(TEMPINC2) -I$(KERNEL_INC) -I$(TARGET_INC_K) $(ALLCFILES) $(CONFIG_PARSER) $(EVE_PROFILE) $(CURVE_FITTING) $(EVE_STATS_COLLLECTOR) $(BOOT) -z $(TARGETLD_FLAGS) -l$(KERNELLIB) -l$(NATCLIB) -l$(EVE_LCF) -l$(EVE_LIB) -l$(EVE_START_LIB) -m $(OBJ_DIR)\$(FILE)_kernelC.map -o $@

$(KERNELLIB): $(KFILES)
	$(TARGETCC) $(DEBUG_FLAG) $(TARGETCC_FLAGS) -I$(TARGETINC) -I$(TARGETINC_VCOP) -I$(TARGET_INC_K) -I$(KERNEL_INC) --temp_directory=$(KERNEL_INC) --obj_directory=$(TARGET_SRC_K) $(KFILES)


$(NATCLIB): $(NATCFILES)
	$(TARGETCC) $(DEBUG_FLAG) $(TARGETCC_FLAGS) -I$(TARGETINC) -I$(TARGETINC_VCOP) -I$(TARGET_INC_K) --temp_directory=$(KERNEL_INC) --obj_directory=$(TARGET_SRC_C) $<

$(OBJ_DIR):
	if not exist $(OBJ_DIR) mkdir $(OBJ_DIR) || cd $(OBJ_DIR)

# clean rules
clean:
	if exist *.o del *.o
	if exist *.obj del *.obj
	if exist ..\src_kernelC\*.obj del ..\src_kernelC\*.obj
	if exist ..\src_C\*.obj del ..\src_C\*.obj
	if exist $(OBJ_DIR)\*.out del $(OBJ_DIR)\*.out
	if exist *.asm del *.asm
	if exist $(TARGET_INC_K)\*_kernel.c del $(TARGET_INC_K)\*_kernel.c
	if exist $(TARGET_INC_K)\*_kernel.h del $(TARGET_INC_K)\*_kernel.h
	if exist $(OBJ_DIR)\*.map del $(OBJ_DIR)\*.map
	if exist *.exe del *.exe
	if exist $(OBJ_DIR) @rmdir/s/q $(OBJ_DIR)
	if exist *.pdb del *.pdb
	if exist *.idb del *.idb
	if exist *.sdo del *.sdo
	if exist *.ilk del *.ilk
	if exist *.suo del *.suo
	if exist translate.data del translate.data
endif
