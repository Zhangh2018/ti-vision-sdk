
var CurrentPlatform = java.lang.System.getenv("PLATFORM");
var CurrentSocFamily = java.lang.System.getenv("SOCFAMILY");
var CurrentSoc = java.lang.System.getenv("SOC");
var CurrentCore = java.lang.System.getenv("CORE");
xdc.print("# !!! Current build PLATFORM is [" + CurrentPlatform + "] !!!" );
xdc.print("# !!! Current build SOC Family is [" + CurrentSocFamily + "] !!!" );
xdc.print("# !!! Current build SOC is [" + CurrentSoc + "] !!!" );
xdc.print("# !!! Current build CORE is [" + CurrentCore + "] !!!" );

/* Move BIOS to release build. This is to reduce link time */
xdc.loadPackage ("ti.sysbios").profile="release";

/* use modules */
var Task        = xdc.useModule('ti.sysbios.knl.Task');
var Idle        = xdc.useModule('ti.sysbios.knl.Idle');
var BIOS        = xdc.useModule('ti.sysbios.BIOS');
var Startup     = xdc.useModule('xdc.runtime.Startup');
var SysStd      = xdc.useModule('xdc.runtime.SysStd');
var System      = xdc.useModule('xdc.runtime.System');
var Assert      = xdc.useModule('xdc.runtime.Assert');
var Main        = xdc.useModule('xdc.runtime.Main');
var Memory      = xdc.useModule('xdc.runtime.Memory');
var Program     = xdc.useModule('xdc.cfg.Program');
var Diags       = xdc.useModule('xdc.runtime.Diags');
var Semaphore   = xdc.useModule('ti.sysbios.knl.Semaphore');
var HeapMem     = xdc.useModule('ti.sysbios.heaps.HeapMem');
var HeapBuf     = xdc.useModule('ti.sysbios.heaps.HeapBuf');
var GIO         = xdc.useModule('ti.sysbios.io.GIO');
var Clock       = xdc.useModule('ti.sysbios.knl.Clock');
var Timestamp   = xdc.useModule('xdc.runtime.Timestamp');
var Core        = xdc.useModule('ti.sysbios.family.arm.ducati.Core');
var HalCore     = xdc.useModule('ti.sysbios.hal.Core');
var Load        = xdc.useModule('ti.sysbios.utils.Load');
var Hwi         = xdc.useModule('ti.sysbios.hal.Hwi');
var SyncSem     = xdc.useModule('ti.sysbios.syncs.SyncSem');
var Cache       = xdc.useModule('ti.sysbios.hal.unicache.Cache');
var HalCache    = xdc.useModule('ti.sysbios.hal.Cache');
var GateDualCore = xdc.useModule('ti.sysbios.family.arm.ducati.GateDualCore');

/* Enable cache */
Cache.enableCache = true;

/* load calculation related settings */
Load.swiEnabled   = true;
Load.hwiEnabled   = true;
Load.taskEnabled  = true;
Load.updateInIdle = true;
Load.windowInMs   = 500;
Load.postUpdate   = '&BspUtils_prfLoadUpdate';

/* Disable SMP BIOS */
BIOS.smpEnabled = false;

/* Bios lib instrumentation */
BIOS.libType = BIOS.LibType_Custom;

/* Fix for right clock of M4 */
BIOS.cpuFreq.hi = 0;
BIOS.cpuFreq.lo = 212500000; /* Actual CPU Clock Rate */

Core.id = 0;
if (CurrentCore == "m4video")
{
    Core.id = 1;
    GateDualCore.initGates = true;
}

/* Clock tick in microseconds */
Clock.tickPeriod    = 1000;

/* Stack size when NULL is passed as stack during TSK create    */
Task.defaultStackSize   = 0x4000;
Task.defaultAffinity    = 0;

Memory.defaultHeapSize  = 0x15000;

/* ISR/SWI stack        */
Program.stack           = 0x4000;
/* Heap used when creating semaphore's, TSK's or malloc() ... */
Program.heap            = 0x15000;

/* section mapping over-ride with respect to default    */
if (CurrentPlatform == "tda3xx-zebu" || CurrentPlatform == "tda2xx-zebu")
{
  Hwi.initStackFlag = false;
  Hwi.checkStackFlag = false;
  Task.initStackFlag = false;
  Task.checkStackFlag = false;
  Program.sectMap[".bss:extMemNonCache:vpdma"]              = "VPS_DESC_MEM";
  Program.sectMap[".bss:frameBuffer"]                       = new Program.SectionSpec();
  Program.sectMap[".bss:frameBuffer"].loadSegment           = "FRAME_BUFFER_MEM";
  Program.sectMap[".bss:frameBuffer"].type                  = "NOLOAD";
  Program.sectMap[".bss:tilerBuffer"]                       = new Program.SectionSpec();
  Program.sectMap[".bss:tilerBuffer"].loadSegment           = "TILER_BUFFER_MEM";
  Program.sectMap[".bss:tilerBuffer"].type                  = "NOLOAD";
  if (CurrentCore == "m4video")
  {
    Program.sectMap[".plt"]                                 = "VIDEO_M4_CODE_MEM";
  }
  else
  {
    Program.sectMap[".plt"]                                 = "VPSS_M4_CODE_MEM";
  }
  var M3Hwi = xdc.useModule('ti.sysbios.family.arm.m3.Hwi');
  M3Hwi.resetVectorAddress = (Core.id + 1) * 0 + 0x20000400;
  M3Hwi.vectorTableAddress = M3Hwi.resetVectorAddress;
  Program.sectMap[".ducatiBoot"]  = "L2_RAM";
  Program.sectMap[".bootVecs"]    = "L2_RAM";
  Program.sectMap[".ducatiGates"] = "L2_RAM";
}
else
{
  Program.sectMap[".bss:extMemNonCache:vpdma"]              = "VPS_DESC_MEM";
  Program.sectMap[".bss:frameBuffer"]                       = new Program.SectionSpec();
  Program.sectMap[".bss:frameBuffer"].loadSegment           = "FRAME_BUFFER_MEM";
  Program.sectMap[".bss:frameBuffer"].type                  = "NOLOAD";
  if (CurrentSocFamily != "tda3xx" && CurrentSoc != "tda2ex")
  {
    Program.sectMap[".bss:tilerBuffer"]                     = new Program.SectionSpec();
    Program.sectMap[".bss:tilerBuffer"].loadSegment         = "TILER_BUFFER_MEM";
    Program.sectMap[".bss:tilerBuffer"].type                = "NOLOAD";
  }
  if (CurrentCore == "m4video")
  {
    Program.sectMap[".plt"]                                 = "VIDEO_M4_CODE_MEM";
  }
  else
  {
    Program.sectMap[".plt"]                                 = "VPSS_M4_CODE_MEM";
  }
}


Main.common$.diags_ASSERT   = Diags.ALWAYS_ON;
Main.common$.diags_INTERNAL = Diags.ALWAYS_ON;

/* To suppress the file name in BIOS compilation*/
var SourceDir = xdc.useModule('xdc.cfg.SourceDir');
SourceDir.verbose = 1;

/* Set the proxy for System module. This enables print statements at runtime in
 * the application */
System.SupportProxy                     = SysStd;

if (CurrentPlatform != "tda3xx-zebu")
{
    if (CurrentPlatform == "tda2xx-interposer" || CurrentSocFamily == "tda3xx" || CurrentSoc == "tda2ex")
    {
        xdc.loadCapsule("utility/bspCommon_AMMU_512MBDDR.cfg");
    }
    else
    {
        xdc.loadCapsule("utility/bspCommon_AMMU.cfg");
    }
}
