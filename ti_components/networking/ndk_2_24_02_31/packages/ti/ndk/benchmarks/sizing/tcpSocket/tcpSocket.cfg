/*
 *  Copyright 2015 by Texas Instruments Incorporated.
 *
 */

/*
 * Copyright (c) 2012, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 *  ======== tcpSocket.cfg ========
 *  Minimized configuration for the TI-RTOS tcpEcho example that contains a
 *  single TCP socket running in a single task.  The TCP send/receive buffers
 *  have been lowered to a value of 512 bytes. Uses DHCP to obtain IP address.

 *
 *  The program works with a modified version of the 'tcpSendReceive' tool
 *  which sends data packets of 512 bytes.
 */

/* ================ General configuration ================ */
var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Log = xdc.useModule('xdc.runtime.Log');
var Main = xdc.useModule('xdc.runtime.Main');
var Memory = xdc.useModule('xdc.runtime.Memory');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');

var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var Hwi = xdc.useModule('ti.sysbios.hal.Hwi');
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');

BIOS.heapSize = 0x1A00;
BIOS.libType = BIOS.LibType_Custom;
BIOS.assertsEnabled = false;
BIOS.logsEnabled = false;

/* ================ NDK configuration ================ */
var Ndk       = xdc.loadPackage('ti.ndk.config');
var Global    = xdc.useModule('ti.ndk.config.Global');
var Ip        = xdc.useModule('ti.ndk.config.Ip');
var Udp       = xdc.useModule('ti.ndk.config.Udp');
var Tcp       = xdc.useModule('ti.ndk.config.Tcp');

Global.IPv6 = false;
Global.stackLibType = Global.MIN;

/* shrink footprint! */

Global.lowTaskStackSize = 768;
Global.normTaskStackSize = 768;
Global.highTaskStackSize = 768;
Global.ndkThreadStackSize = 1152;
Global.pktNumFrameBufs = 2;
Global.memRawPageCount = 8;
Global.memRawPageSize = 768;

/* below settings require modified tcpSendReceive app for 512 byte transfers */
Tcp.transmitBufSize = 512;
Tcp.receiveBufSize  = 512;
Tcp.receiveBufLimit = 512;
Udp.receiveBufSize = 512;

Program.stack = 512;
Task.defaultStackSize = 768;
Task.idleTaskStackSize = 512;

/* ================ Driver configuration ================ */
var TIRTOS = xdc.useModule('ti.tirtos.TIRTOS');

var EMAC = xdc.useModule('ti.drivers.EMAC');

var taskParams = new Task.Params();
taskParams.stackSize = 768;
taskParams.priority = 1;
taskParams.arg0  = 1000;
var handlerTask = Task.create('&tcpHandler', taskParams);

/*
 *  @(#) ti.ndk.benchmarks.sizing; 1,0,0,0; 3-24-2015 15:39:24; /db/vtree/library/trees/ndktest/ndktest-c17/src/ xlibrary

 */

