/*
 *  ======== dlb_test.cfg ========
 *
 */
 
/*
 * Copyright (C) 2013 Texas Instruments Incorporated - http://www.ti.com/
 *
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *    Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 *    Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the
 *    distribution.
 *
 *    Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
*/

var smpBiosEnabled = 0;
var enableProfiling = 0;
 
/**********************************************************************\
|                          Module  Dependencies                        |
\**********************************************************************/

/* SysBios modules */
var Bios        = xdc.useModule('ti.sysbios.BIOS');
var HeapMem     = xdc.useModule('ti.sysbios.heaps.HeapMem');
var Clock       = xdc.useModule('ti.sysbios.knl.Clock');
var Task        = xdc.useModule('ti.sysbios.knl.Task');
var Semaphore   = xdc.useModule('ti.sysbios.knl.Semaphore');
var Core        = xdc.useModule('ti.sysbios.family.arm.ducati.Core');
var Hwi         = xdc.useModule('ti.sysbios.family.arm.m3.Hwi');
var HalHwi      = xdc.useModule('ti.sysbios.hal.Hwi');
var Cache       = xdc.useModule('ti.sysbios.hal.unicache.Cache');
var IntXbar     = xdc.useModule('ti.sysbios.family.shared.vayu.IntXbar');
if (smpBiosEnabled)
{
    var SysStd  = xdc.useModule("ti.sysbios.smp.SysStd");
    var Load    = xdc.useModule("ti.sysbios.smp.Load");
}
else
{
    var Load    = xdc.useModule('ti.sysbios.utils.Load');
}

/* XDC modules */
var Defaults    = xdc.useModule('xdc.runtime.Defaults');
var Memory      = xdc.useModule('xdc.runtime.Memory');
var System      = xdc.useModule('xdc.runtime.System');
if (!smpBiosEnabled)
{
    var SysStd  = xdc.useModule("xdc.runtime.SysStd");
}

/* NDK modules */
var NdkConfigGlobal = xdc.useModule('ti.ndk.config.Global');
var Ip              = xdc.useModule('ti.ndk.config.Ip');
var Tcp             = xdc.useModule('ti.ndk.config.Tcp');
var Udp             = xdc.useModule('ti.ndk.config.Udp');

/* NSP Driver */
var GMACSW          = xdc.useModule('ti.nsp.drv.GMACSW');


/**********************************************************************\
|                      Miscellaneous Configuration                     |
\**********************************************************************/

/* Specify startup init function for Bios */
Bios.startupFxns = ['&tda3xx_init'];      /* call the init function at startup time */
Bios.libType = Bios.LibType_Custom;

/* Allow load profiling of ISRs */
Load.hwiEnabled = true;

/* Cache should be enabled to use the AMMU */
Cache.enableCache = true;

/* select Timer 0 to drive BIOS clock */
Clock.timerId = 0;
Clock.swiPriority = null;

/* specify Core Id */
Core.id = 0;
Program.global.coreName = "IPU1";

/* Enable SysBios to operate in SMP mode on the M4s (if selected) */
if (smpBiosEnabled)
{
    Bios.smpEnabled = true;                 

    /* For initial SMP development only - remove when ready for full SMP release */
    Task.defaultAffinity = 0;
}
else
{
    Bios.smpEnabled = false;
}

/* Set the proxy for System module. This enables print statements at runtime in
 * the application */
System.SupportProxy                     = SysStd;


/**********************************************************************\
|                  Interrupt and MMU Configuration                     |
\**********************************************************************/

var ammu = xdc.loadCapsule("../common/ammu.xs");
ammu.AMMU_init();

/* GMAC_SW RX_THRESH_PULSE Interrupt */
IntXbar.connectIRQMeta(57, 334);
var hwi_param_0 = new Hwi.Params;
hwi_param_0.arg = 0;
Hwi.create(57, '&HwIntRxThresh', hwi_param_0);

/* GMAC_SW RX_PULSE Interrupt */
IntXbar.connectIRQMeta(58, 335);
var hwi_param_1 = new Hwi.Params;
hwi_param_1.arg = 0;
Hwi.create(58, '&HwIntRx', hwi_param_1);

/* GMAC_SW TX_PULSE Interrupt */
IntXbar.connectIRQMeta(59, 336);
var hwi_param_2 = new Hwi.Params;
hwi_param_2.arg = 0;
Hwi.create(59, '&HwIntTx', hwi_param_2);

/* GMAC_SW MISC_PULSE Interrupt */
IntXbar.connectIRQMeta(60, 337);
var hwi_param_3 = new Hwi.Params;
hwi_param_3.arg = 0;
Hwi.create(60, '&HwIntMisc', hwi_param_3);


/**********************************************************************\
|                      Memory & Memory Map Setup                       |
\**********************************************************************/

/* create a HeapMem heap instance "DataHeap" */
var dataheapParams = new HeapMem.Params;
dataheapParams.size = 0x00020000;
dataheapParams.sectionName = "DataHeap";
var dataHeap = HeapMem.create(dataheapParams);

/* set "dataHeap" to be the default Heap for the app */
Memory.defaultHeapInstance = dataHeap;

var dataMemSectName = Program.platform.dataMemory;
var codeMemSectName = Program.platform.codeMemory;

/* map the section name DataHeap to load into the data section of the platform */
Program.sectMap["DataHeap"] = dataMemSectName;

/* Put all code sections in the code section of the platform */
Program.sectMap[".text"] = codeMemSectName;

/* Use the data RAM region */
var section = new Program.SectionSpec();
section.loadSegment = dataMemSectName;
section.type = "NOINIT";
Program.sectMap[".bss:NDK_PACKETMEM"] = section;
section = new Program.SectionSpec();
section.loadSegment = dataMemSectName;
section.type = "NOINIT";
Program.sectMap[".bss:NDK_MMBUFFER"] = section;


/**********************************************************************\
|                      NSP Driver configuration                        |
\**********************************************************************/

/* Use digital loopback driver */
GMACSW.instrumentedBuild = true;


/**********************************************************************\
|                          NDK configuration                           |
\**********************************************************************/

/* select the stack library we want */
NdkConfigGlobal.IPv6            = false;
NdkConfigGlobal.stackLibType    = NdkConfigGlobal.MIN;
NdkConfigGlobal.netSchedulerPri = NdkConfigGlobal.NC_PRIORITY_HIGH;
NdkConfigGlobal.debugAbortLevel = NdkConfigGlobal.DBG_NONE;
NdkConfigGlobal.debugPrintLevel = NdkConfigGlobal.DBG_NONE;

/* Assign memory sections and sizes */
NdkConfigGlobal.pbmDataSection      = ".bss:NDK_PACKETMEM";
NdkConfigGlobal.memDataSection      = ".bss:NDK_MMBUFFER";
NdkConfigGlobal.lowTaskStackSize    = 8192;
NdkConfigGlobal.normTaskStackSize   = 8192;
NdkConfigGlobal.highTaskStackSize   = 8192;
NdkConfigGlobal.ndkThreadStackSize  = 8192;
NdkConfigGlobal.pktSizeFrameBuf     = 1536;
NdkConfigGlobal.pktNumFrameBufs     = 256;
NdkConfigGlobal.memRawPageSize      = 3072;
NdkConfigGlobal.memRawPageCount     = 16;

/* Use hook functions available in the ti.ndk.config.Global module */
NdkConfigGlobal.networkOpenHook     = '&netOpenHook';
NdkConfigGlobal.networkCloseHook    = '&netCloseHook';

/* change the size of our receive buffers */
Ip.dhcpClientMode = Ip.CIS_FLG_IFIDXVALID;
Tcp.transmitBufSize     = 8192;
Tcp.receiveBufSize      = 8192;
Tcp.receiveBufLimit     = 8192;
Udp.receiveBufSize      = 8192;

/* Settings for static IP configuration - Uncomment this to assign static IP to the target */
Ip.address = "192.168.1.200";
Ip.mask = "255.255.255.0";
Ip.gatewayIpAddr = "192.168.1.1";
Ip.ifIdx = 1;


/**********************************************************************\
|                         Profiler configuration                       |
\**********************************************************************/

/* System Analyzer setup */
if (enableProfiling)
{
    var LoggingSetup = xdc.useModule('ti.uia.sysbios.LoggingSetup');
    var LoggerStopMode = xdc.useModule('ti.uia.runtime.LoggerStopMode');
    var loggerStopModeParams = new LoggerStopMode.Params();
    loggerStopModeParams.transferBufSize = 4194304;
    loggerStopModeParams.bufSection = ".logger";
    var logger = LoggerStopMode.create(loggerStopModeParams);
    logger.instance.name = "StopModeLogger";
    LoggingSetup.mainLogger = logger;
    LoggingSetup.sysbiosHwiLogging = true;
    LoggingSetup.sysbiosSwiLogging = true;
    LoggingSetup.sysbiosSwiLoggingRuntimeControl = true;
    LoggingSetup.sysbiosHwiLoggingRuntimeControl = true;
    LoggingSetup.sysbiosLoggerSize = 524288;
    LoggingSetup.loadLoggerSize = 262144;
    LoggingSetup.mainLoggerSize = 262144;
    Program.sectMap[".logger"] = dataMemSectName;
}


/**********************************************************************\
|                             END OF FILE                              |
\**********************************************************************/
