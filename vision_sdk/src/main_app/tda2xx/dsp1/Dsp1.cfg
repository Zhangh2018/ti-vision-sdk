/*******************************************************************************
 *                                                                             *
 * Copyright (c) 2013 Texas Instruments Incorporated - http://www.ti.com/      *
 *                        ALL RIGHTS RESERVED                                  *
 *                                                                             *
 ******************************************************************************/

/*******************************************************************************
*  file name: Dsp1.cfg
*  Set the DSP core 1 specific configurations
*  Platform: VAYU_bios_elf
*  Target: ti.targets.elf.C66
*
*******************************************************************************/


var CurrentPlatform = java.lang.System.getenv("PLATFORM");
var A15TargetOS     = java.lang.System.getenv("A15_TARGET_OS");

xdc.print("# !!! Current build platform is [" + CurrentPlatform + "] !!!" );

xdc.loadPackage('ti.sysbios').profile = "release";
xdc.loadCapsule("src/main_app/tda2xx/cfg/BIOS_common.cfg");

xdc.loadCapsule("src/main_app/tda2xx/cfg/DSP_common.cfg");
var Exception   = xdc.useModule('ti.sysbios.family.c64p.Exception');

/* root of the configuration object model */
var Program = xdc.useModule('xdc.cfg.Program');

var BIOS = xdc.useModule('ti.sysbios.BIOS');
BIOS.cpuFreq.hi = 0;
BIOS.cpuFreq.lo = 600000000; /* 600 MHz */


if(A15TargetOS == "Bios")
{

    /***********************************************
     *          CLOCK Module Configuraion          *
     ***********************************************/
    var Clock = xdc.useModule("ti.sysbios.knl.Clock");
    Clock.tickMode = Clock.TickMode_PERIODIC;
    Clock.tickSource = Clock.TickSource_USER;


    /***********************************************
    *           Timer Module Configuraion         *
    ***********************************************/
    var Timer = xdc.useModule('ti.sysbios.timers.dmtimer.Timer');
    /* allocate timer 5 & 6 to DSP1 */
    var TimerSupport = xdc.useModule('ti.sysbios.family.shared.vayu.TimerSupport');
    TimerSupport.availMask = 0x0030;

    var timerParams = new Timer.Params();
    timerParams.period = 1000;
    timerParams.twer.ovf_wup_ena = 1;
    timerParams.tiocpCfg.emufree = 1;
    timerParams.tiocpCfg.idlemode = 1;
    timerParams.tsicr.posted = 0;
    Timer.intFreqs[4].hi = 0;
    Timer.intFreqs[4].lo = 20000000;
    Timer.checkFrequency = false;
    Timer.create(4, '&mainDsp1TimerTick', timerParams);

    var DMTimer = xdc.useModule('ti.sysbios.timers.dmtimer.Timer');
    DMTimer.checkFrequency = false;
    DMTimer.intFreqs[5].hi = 0;
    DMTimer.intFreqs[5].lo = 20000000;
    var timerParams2 = new DMTimer.Params();
    timerParams2.tsicr.posted = 0;
    var DMTimestampProvider = xdc.useModule("ti.sysbios.timers.dmtimer.TimestampProvider");
    DMTimestampProvider.timerId = 5;
    DMTimestampProvider.useClockTimer = false;
    var Timestamp = xdc.useModule("xdc.runtime.Timestamp");
    Timestamp.SupportProxy = DMTimestampProvider;
}

    /* Add an idle thread 'Utils_idleFxn' that monitors interrupts. */
    var Idle = xdc.useModule("ti.sysbios.knl.Idle");
    Idle.addFunc('&Utils_idleFxn');

/*
 *  ======== IPC Configuration ========
 */
Program.global.procName = "DSP1";
xdc.loadCapsule("src/main_app/tda2xx/cfg/IPC_common.cfg");

/*
 *  ======== Operating System Configuration ========
 */

/* no rts heap */
Program.heap = 0;
Program.argSize = 100;  /* minimum size */
Program.stack   = 0x1000;

/* create a default heap */
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
var heapMemParams = new HeapMem.Params();
heapMemParams.size = 0x80000;

var Memory = xdc.useModule('xdc.runtime.Memory');
Memory.defaultHeapInstance = HeapMem.create(heapMemParams);


Program.sectMap[".bss:extMemNonCache:remoteLogCoreShm"] = "REMOTE_LOG_MEM";
Program.sectMap[".bss:extMemNonCache:hcfResourceTable"] = "REMOTE_LOG_MEM";
Program.sectMap[".bss:extMemNonCache:ipcShm"] = "SYSTEM_IPC_SHM_MEM";
Program.sectMap[".bss:extMemNonCache:linkStats"] = "LINK_STATS_MEM";

Program.sectMap[".text"]                      = "DSP1_CODE_MEM";
Program.sectMap[".plt"]                       = "DSP1_CODE_MEM";
Program.sectMap[".vecs"]                      = "DSP1_DATA_MEM";
Program.sectMap[".stack"]                     = "DSP1_DATA_MEM";
Program.sectMap[".stackMemory"]               = "DSP1_DATA_MEM";
Program.sectMap[".bss:taskStackSection"]      = "DSP1_DATA_MEM";
Program.sectMap[".init_array"]                = "DSP1_DATA_MEM";
Program.sectMap[".cinit"]                     = "DSP1_DATA_MEM";
Program.sectMap[".pinit"]                     = "DSP1_DATA_MEM";
Program.sectMap[".args"]                      = "DSP1_DATA_MEM";
Program.sectMap[".switch"]                    = "DSP1_DATA_MEM";
Program.sectMap[".rodata"]                    = "DSP1_DATA_MEM";
Program.sectMap[".neardata"]                  = "DSP1_DATA_MEM";
Program.sectMap[".bss"]                       = "DSP1_DATA_MEM";
Program.sectMap[".const"]                     = "DSP1_DATA_MEM";
Program.sectMap[".fardata"]                   = "DSP1_DATA_MEM";
Program.sectMap[".dataMemory"]                = "DSP1_DATA_MEM";
Program.sectMap[".data"]                      = "DSP1_DATA_MEM";
Program.sectMap[".far"]                       = "DSP1_DATA_MEM";
Program.sectMap[".cio"]                       = "DSP1_DATA_MEM";
Program.sectMap[".sysmem"]                    = "DSP1_DATA_MEM";
Program.sectMap["ti_sdo_ipc_init"]            = "DSP1_DATA_MEM";
Program.sectMap[".systemHeap"]                = "DSP1_DATA_MEM";

Program.sectMap[".bss:heapMemL2"]             = "L2SRAM";
Program.sectMap[".pmIdleFunc"]                = "DSP1_CODE_MEM";

if(A15TargetOS == "Linux")
{
   Program.sectMap[".bss:heapMemL2"]          = new Program.SectionSpec();
   Program.sectMap[".bss:heapMemL2"].type     = "NOLOAD";
}

/* Boot address needs to be aligned to 0x400 */
Program.sectMap[".text:_c_int00"]             = new Program.SectionSpec();
Program.sectMap[".text:_c_int00"].loadSegment = "DSP1_CODE_MEM";
Program.sectMap[".text:_c_int00"].loadAlign   = 0x400;

/* Exception hook function */
var HwiDsp       = xdc.useModule('ti.sysbios.family.c64p.Hwi');
var ExceptionDsp       = xdc.useModule('ti.sysbios.family.c64p.Exception');

/* enable print of exception handing info */
HwiDsp.enableException = true;
ExceptionDsp.exceptionHook = '&Utils_dspExceptionHookFxn';

/* XDC runtime function */
var Error = xdc.useModule("xdc.runtime.Error");
Error.raiseHook = "&Utils_commonErrorRaiseHook";

if(A15TargetOS == "Linux")
{
    xdc.loadCapsule("src/main_app/tda2xx/dsp1/Dsp1_a15_linux.cfg");
}

