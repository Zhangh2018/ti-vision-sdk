/* ========================================================================== */
/*                      CFG script for the Audio sample                       */
/* ========================================================================== */

/* Set the following to true to build the example for JAMR3 audio.
 * Otherwise, the default will be CPU board audio. */
var useJAMR = false;

/* Load specific audio parameters for this build */
var Audio       = xdc.loadCapsule("audio/common/audioCommon.cfg");
Audio.init(useJAMR);

/* load the required files and packages                                       */
xdc.loadCapsule("utility/bspCommonBIOS.cfg");
var GIO          = xdc.useModule('ti.sysbios.io.GIO');
var Task         = xdc.useModule('ti.sysbios.knl.Task');
var IntXbar      = xdc.useModule('ti.sysbios.family.shared.vayu.IntXbar');
var BIOS        = xdc.useModule('ti.sysbios.BIOS');
var Defaults    = xdc.useModule('xdc.runtime.Defaults');
var Diags       = xdc.useModule('xdc.runtime.Diags');
var Main        = xdc.useModule('xdc.runtime.Main');
var System      = xdc.useModule('xdc.runtime.System');
var HeapMem     = xdc.useModule('ti.sysbios.heaps.HeapMem');
var LoggerBuf   = xdc.useModule('xdc.runtime.LoggerBuf');
var Semaphore   = xdc.useModule('ti.sysbios.knl.Semaphore');

/*
 * The BIOS module will create the default heap for the system.
 * Specify the size of this default heap.
 */

 /* System stack size (used by ISRs and Swis) */
Program.stack = 0x2000;

//System.SupportProxy = SysStd;

/* allocate a config-params object */
var HeapParam = new HeapMem.Params;

/* optionally assign per-instance configs */
HeapParam.size = 180000;

/* create an instance-object */
Program.global.myHeap = HeapMem.create(HeapParam);

/*
 * Create and install logger for the whole system
 */
var loggerBufParams = new LoggerBuf.Params();
loggerBufParams.numEntries = 32;
var logger0 = LoggerBuf.create(loggerBufParams);
Defaults.common$.logger = logger0;
Main.common$.diags_INFO = Diags.ALWAYS_ON;

Program.global.hsi2c_sem0 = Semaphore.create(1);
Program.global.hsi2c_sem1 = Semaphore.create(1);
Program.global.hsi2c_sem2 = Semaphore.create(1);
Program.global.hsi2c_sem3 = Semaphore.create(1);

if (useJAMR == false)
{
    var iomFxns = "I2c_IOMFXNS";
    var initFxn = "user_i2cExpander_init";
    var deviceParams = "devI2cExpanderInitParams";
    var deviceId = Audio.i2cExpanderDeviceId;
    GIO.addDeviceMeta("i2c", iomFxns, initFxn, deviceId, deviceParams);
}

var iomFxns = "I2c_IOMFXNS";
var initFxn = "user_i2cAudio_init";
var deviceParams = "devI2cAudioInitParams";
var deviceId = Audio.i2cAudioDeviceId;
GIO.addDeviceMeta("i2c", iomFxns, initFxn, deviceId, deviceParams);

var iomFxns = "I2c_IOMFXNS";
var initFxn = "user_i2c2_init";
var deviceParams = "devI2c2InitParams";
var deviceId = 2;
GIO.addDeviceMeta("i2c", iomFxns, initFxn, deviceId, deviceParams);

var iomFxns = "Aic31_IOMFXNS";
var initFxn = "audioUserAic31Init";
var deviceParams = "audioAic31Params";
var deviceId = Audio.aicDeviceId;
GIO.addDeviceMeta("/aic310", iomFxns, initFxn, deviceId, deviceParams);

var iomFxns = "Audio_IOMFXNS";
var initFxn = "audioUserAudioInit";
var deviceParams = "audioParams";
var deviceId = 0;
GIO.addDeviceMeta("/audio0", iomFxns, initFxn, deviceId, deviceParams);

var iomFxns = "Mcasp_IOMFXNS";
var initFxn = "audioUserMcaspInit";
var deviceParams = "audioMcaspParams";
var deviceId = Audio.mcaspDeviceId;
GIO.addDeviceMeta(Audio.mcaspDeviceName, iomFxns, initFxn, deviceId, deviceParams);

var task0Params = new Task.Params();
task0Params.priority = 5;
task0Params.instance.name = "task0";
Program.global.task0 = Task.create("&Audio_echo_Task", task0Params);
