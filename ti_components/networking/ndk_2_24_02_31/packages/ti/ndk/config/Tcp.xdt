%%{
/*
 * Copyright (c) 2012, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * */
/*
 *  ======== Tcp.xdt ========
 *  Template to generate C code for the Tcp module.
 */

// get handles to needed modules
var Global = xdc.module('ti.ndk.config.Global');
var Tcp = xdc.module('ti.ndk.config.Tcp');
%%}

% if (Tcp.$used > 0 && Global.enableCodeGeneration) {
Void ti_ndk_config_tcp_init(HANDLE hCfg)
{
%
% // only update the configuration if the user changed the Tcp config params
%
% if (Tcp.maxNumReasmPkts != Tcp.defaultMaxReasmPkts) {
    {
        Int maxNumReasmPkts = `Tcp.maxNumReasmPkts`;
        CfgAddEntry(hCfg, CFGTAG_IP, CFGITEM_IP_TCPREASMMAXPKT,
                CFG_ADDMODE_UNIQUE, sizeof(uint), (UINT8 *)&maxNumReasmPkts, 0);
    }
% } // end "if (Tcp.maxNumReasmPkts ..."
%
% if (Tcp.transmitBufSize != Tcp.defaultTxBufSize) {
    {
        Int transmitBufSize = `Tcp.transmitBufSize`;
        CfgAddEntry(hCfg, CFGTAG_IP, CFGITEM_IP_SOCKTCPTXBUF,
                CFG_ADDMODE_UNIQUE, sizeof(uint), (UINT8 *)&transmitBufSize, 0);
    }
% } // end "if (Tcp.transmitBufSize ..."
%
% if (Tcp.receiveBufSize != Tcp.defaultRxBufSize) {
    {
        Int receiveBufSize = `Tcp.receiveBufSize`;
        CfgAddEntry(hCfg, CFGTAG_IP, CFGITEM_IP_SOCKTCPRXBUF,
                CFG_ADDMODE_UNIQUE, sizeof(uint), (UINT8 *)&receiveBufSize, 0);
    }
% } // end "if (Tcp.receiveBufSize ..."
%
% if (Tcp.receiveBufLimit != Tcp.defaultRxBufLimit) {
    {
        Int receiveBufLimit = `Tcp.receiveBufLimit`;
        CfgAddEntry(hCfg, CFGTAG_IP, CFGITEM_IP_SOCKTCPRXLIMIT,
                CFG_ADDMODE_UNIQUE, sizeof(uint), (UINT8 *)&receiveBufLimit, 0);
    }
% } // end "if (Tcp.receiveBufLimit ..."
%
% if (Tcp.keepIdleTime != Tcp.defaultKeepIdleTime) {
    {
        Int keepIdleTime = `Tcp.keepIdleTime`;
        CfgAddEntry(hCfg, CFGTAG_IP, CFGITEM_IP_TCPKEEPIDLE,
                CFG_ADDMODE_UNIQUE, sizeof(uint), (UINT8 *)&keepIdleTime, 0);
    }
% } // end "if (Tcp.keepIdleTime ..."
%
% if (Tcp.keepProbeInterval != Tcp.defaultKpProbIntv) {
    {
        Int keepProbeInterval = `Tcp.keepProbeInterval`;
        CfgAddEntry(hCfg, CFGTAG_IP, CFGITEM_IP_TCPKEEPINTVL,
                CFG_ADDMODE_UNIQUE, sizeof(uint), (UINT8 *)&keepProbeInterval,
                0);
    }
% } // end "if (Tcp.keepProbeInterval ..."
%
% if (Tcp.keepProbeTimeout != Tcp.defaultKpProbTimeout) {
    {
        Int keepProbeTimeout = `Tcp.keepProbeTimeout`;
        CfgAddEntry(hCfg, CFGTAG_IP, CFGITEM_IP_TCPKEEPMAXIDLE,
               CFG_ADDMODE_UNIQUE, sizeof(uint), (UINT8 *)&keepProbeTimeout, 0);
    }
% } // end "if (Tcp.keepProbeTimeout ..."
%

}
% }
