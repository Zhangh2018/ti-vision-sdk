diff --git a/packages/ti/ipc/family/vayu/VirtQueue.c b/packages/ti/ipc/family/vayu/VirtQueue.c
index e36666b..a670cef 100755
--- a/packages/ti/ipc/family/vayu/VirtQueue.c
+++ b/packages/ti/ipc/family/vayu/VirtQueue.c
@@ -381,18 +381,24 @@ Void VirtQueue_isr(UArg msg)
             return;
 
         case (UInt)RP_MSG_HIBERNATION:
+#if 0
             if (IpcPower_canHibernate() == FALSE) {
+#endif
                 InterruptProxy_intSend(hostProcId, NULL,
                         (UInt)RP_MSG_HIBERNATION_CANCEL);
                 return;
+#if 0
             }
+#endif
 
             /* Fall through */
         case (UInt)RP_MSG_HIBERNATION_FORCE:
+#if 0
             /* Ack request */
             InterruptProxy_intSend(hostProcId, NULL,
                     (UInt)RP_MSG_HIBERNATION_ACK);
             IpcPower_suspend();
+#endif
             return;
 
         default:
@@ -502,8 +508,10 @@ Void VirtQueue_startup()
     intInfo.intVectorId = DSPEVENTID;
 #endif
 
+#if 0
     /* Initilize the IpcPower module */
     IpcPower_init();
+#endif
 
     /*
      * Wait for HLOS (Virtio device) to indicate that priming of host's receive
diff --git a/packages/ti/ipc/family/vayu/package.xs b/packages/ti/ipc/family/vayu/package.xs
index caf2ee2..db49be8 100755
--- a/packages/ti/ipc/family/vayu/package.xs
+++ b/packages/ti/ipc/family/vayu/package.xs
@@ -86,10 +86,12 @@ function validate()
         if (Program.build.target.isa.match(/v7M4/)) {
             /* On Vayu's IPUs, VirtQueue only supports SMP BIOS */
             var BIOS = xdc.module('ti.sysbios.BIOS');
+/*
             if (!BIOS.smpEnabled) {
                 throw new Error(this.$name + " must have BIOS.smpEnabled " +
                         "set to true.");
             }
+*/
         }
     }
 }
diff --git a/packages/ti/ipc/rpmsg/package.xs b/packages/ti/ipc/rpmsg/package.xs
index 01adaa6..b88138f 100755
--- a/packages/ti/ipc/rpmsg/package.xs
+++ b/packages/ti/ipc/rpmsg/package.xs
@@ -76,10 +76,11 @@ function getLibs(prog)
     var platform = "";
     var smp = "";
 
+/*
     if (xdc.module('ti.sysbios.BIOS').smpEnabled) {
         smp = "_smp";
     }
-
+*/
     switch (device) {
         case "OMAP4430":
         case "OMAP5430":
@@ -102,6 +103,8 @@ function getLibs(prog)
 
         case "Vayu":
         case "DRA7XX":
+        if (suffix != "e66")
+            smp = "_smp";
             platform = "vayu";
             break;
 
diff --git a/packages/ti/ipc/tests/Ipu1Smp.cfg b/packages/ti/ipc/tests/Ipu1Smp.cfg
index 919bdb5..2ec3780 100755
--- a/packages/ti/ipc/tests/Ipu1Smp.cfg
+++ b/packages/ti/ipc/tests/Ipu1Smp.cfg
@@ -32,7 +32,7 @@
 
 /* Configure BIOS for SMP-mode */
 var BIOS = xdc.useModule('ti.sysbios.BIOS');
-BIOS.smpEnabled = true;
+BIOS.smpEnabled = false;
 
 /* -------------------------------- CORE0 ----------------------------------*/
 var MultiProc = xdc.useModule('ti.sdo.utils.MultiProc');
@@ -59,15 +59,15 @@ timerParams.twer.ovf_wup_ena = 0x1;
 Timer.create(Clock.timerId, Clock.doTick, timerParams);
 
 /* Modules used in Power Management */
-xdc.loadPackage('ti.pm');
-var Power = xdc.useModule('ti.sysbios.family.arm.ducati.smp.Power');
-Power.loadSegment = "PM_DATA";
+//xdc.loadPackage('ti.pm');
+//var Power = xdc.useModule('ti.sysbios.family.arm.ducati.smp.Power');
+//Power.loadSegment = "PM_DATA";
 
 /* Idle functions - PM functions should be last */
 var Idle = xdc.useModule('ti.sysbios.knl.Idle');
 /* Function to flush unicache in each core */
-Idle.addCoreFunc('&VirtQueue_cacheWb', 0);
-Idle.addCoreFunc('&VirtQueue_cacheWb', 1);
+//Idle.addCoreFunc('&VirtQueue_cacheWb', 0);
+//Idle.addCoreFunc('&VirtQueue_cacheWb', 1);
 
 var Hwi = xdc.useModule('ti.sysbios.family.arm.m3.Hwi');
 Hwi.enableException = true;
@@ -94,8 +94,8 @@ Idle.addCoreFunc('&ti_deh_Deh_idleBegin', 0);
 Idle.addCoreFunc('&ti_deh_Deh_idleBegin', 1);
 
 /* Idle Power Management functions for each core */
-Idle.addCoreFunc('&IpcPower_idle', 0); /* IpcPower_idle must be at the end */
-Idle.addCoreFunc('&IpcPower_idle', 1); /* IpcPower_idle must be at the end */
+//Idle.addCoreFunc('&IpcPower_idle', 0); /* IpcPower_idle must be at the end */
+//Idle.addCoreFunc('&IpcPower_idle', 1); /* IpcPower_idle must be at the end */
 
 Program.sectMap[".tracebuf"] = "TRACE_BUF";
 Program.sectMap[".errorbuf"] = "EXC_DATA";
